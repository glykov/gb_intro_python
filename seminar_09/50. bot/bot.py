import logging
import asyncio
import pathlib
from aiogram import Bot, Dispatcher, types, executor
from configparser import ConfigParser
import sqlite3

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_DIR = pathlib.Path(__file__).parent
config = ConfigParser()
config.read(BOT_DIR / 'bot.conf', encoding='utf-8')

BOT_TOKEN = config.get('bot', 'TOKEN')
BOT_LINK = config.get('bot', 'LINK')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

con = sqlite3.connect(BOT_DIR / "phonebook.db")
cursor = con.cursor()


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.get_mention(as_html=True)} üëã!\n–í–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        parse_mode=types.ParseMode.HTML,
    )


@dp.message_handler(commands=['help'])
async def help_handler(message: types.Message):
    await message.answer("–¢—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:\n"
                         "/create –§–∞–º–∏–ª–∏—è, –ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–ø–∏—Å–∞–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç\n"
                         "/read –§–∞–º–∏–ª–∏—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω - –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç\n"
                         "/udpate –º–∞—Ä–∫–µ—Ä : —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ : –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç\n"
                         "–º–∞—Ä–∫–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: –§ - –ø–æ–º–µ–Ω—è—Ç—å —Ñ–∞–º–∏–ª–∏—é\n"
                         "–ò - –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è, –¢ - –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –û - –ø–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                         "/delete –§–∞–º–∏–ª–∏—è - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")


@dp.message_handler(commands=['create'])
async def create_handler(message: types.Message):
    idx = message.text.index(" ")
    data = [s.strip() for s in message.text[idx:].split(',')]
    cursor.execute("insert into people(last_name, first_name, phone, description) values(?, ?, ?, ?)",
                   (data[0], data[1], data[2], data[3]))
    con.commit()
    msg = "–î–æ–±–∞–≤–ª–µ–Ω–æ: " + ', '.join(data)
    await bot.send_message(message.from_user.id, msg)


@dp.message_handler(commands=['read'])
async def read_handler(message: types.Message):
    idx = message.text.index(" ")
    target = message.text[idx:].strip()
    result = tuple()
    if target[0].isdigit():
        result = cursor.execute(
            "select * from people where phone like :phone", {"phone": target})
    else:
        result = cursor.execute(
            "select * from people where last_name like :name", {"name": target})
    msg = ""
    for row in result:
        msg += ', '.join(row[1:])
    await bot.send_message(message.from_user.id, msg)


@dp.message_handler(commands=['update'])
async def update_handler(message: types.Message):
    msg = ""
    idx = message.text.index(" ")
    target = message.text[idx:].strip().split(':')
    if target[0].upper() == "–§":
        cursor.execute(
            "update people set last_name=? where last_name=?", (target[2], target[1]))
    elif target[0].upper() == "–ò":
        cursor.execute(
            "update people set first_name=? where first_name=?", (target[2], target[1]))
    elif target[0].upper() == "–¢":
        cursor.execute("update people set phone=? where phone=?",
                       (target[2], target[1]))
    elif target[0].upper() == "–û":
        cursor.execute(
            "update people set description=? where description=?", (target[2], target[1]))
    else:
        msg = "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"

    con.commit()

    if (not msg):
        msg = f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∑–∞–º–µ–Ω–∞ {target[1]} –Ω–∞ {target[2]}"

    await bot.send_message(message.from_user.id, msg)


@dp.message_handler(commands=['delete'])
async def delete_handler(message: types.Message):
    idx = message.text.find(" ")
    lname = message.text[idx:]
    cursor.execute("delete from people where last_name=?", (lname,))
    await bot.send_message(message.from_user.id, f"–ó–∞–ø–∏—Å—å –æ–± {lname} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")


@dp.message_handler()
async def main(message: types.Message):
    await bot.send_message(message.from_user.id, message.text)


if __name__ == "__main__":
    executor.start_polling(dp)
